this is the test project for using new feature in c++ 20 I will check some more function for the learning

## C++20 Features Demonstrated:

### 1. **C++20 Modules**
- Module interface files (.ixx)
- Module implementation files (.cppm)
- Import/export syntax

### 2. **Coroutines**
- Basic coroutine implementation
- Async task management

### 3. **Three-Way Comparison (`<=>`)**
- Spaceship operator
- Strong ordering comparisons

### 4. **Semaphores (NEW!)**
- `std::counting_semaphore` for resource pools
- `std::binary_semaphore` as mutex alternative
- Performance comparison with traditional mutex
- Resource management and synchronization

### 5. **Concepts and Constraints**
- Template requirements
- Type safety improvements

### 6. **Standard Library Enhancements**
- std::execution policies
- Atomic operations
- std::variant types

## New Semaphore Features:

The project now includes comprehensive semaphore demonstrations:

- **SemaphoreResourcePool**: Uses counting semaphore to manage resource access
- **MutexResourcePool**: Traditional mutex implementation for comparison
- **BinarySemaphoreExample**: Binary semaphore as mutex alternative
- **Performance Tests**: Benchmark semaphore vs mutex performance

### Key Benefits of C++20 Semaphores:
- **Better Resource Management**: Counting semaphores naturally handle resource pools
- **Timeout Support**: Built-in timeout capabilities with `try_acquire_for()`
- **Cleaner Code**: More intuitive than condition variables for resource counting
- **Performance**: Often better performance than mutex + condition variable combinations
